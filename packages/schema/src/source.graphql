# enum SourceType {
#   postgres
# }

# TODO: validation of source configs with scalars?

# union SourceConfig = PostgresSourceConfig
union CommandConfig = PostgresCommandConfig

# type PostgresSourceConfig {
#   connection: String!
# }

type PostgresCommandConfig {
  value: String
}

# type Source {
#   id: String!
#   createdAt: DateTime!
#   name: String!
#   type: SourceType!
#   config: SourceConfig!
# }

type Command {
  id: Int!
  createdAt: DateTime!
  name: String!
  # source: Source!
  config: CommandConfig!
  stale: [Command!]!
}

extend type Query {
  commands: [Command!]!
  readCommand(commandId: Int!, args: JSONObject): JSON
}

extend type Mutation {
  writeCommand(commandId: Int!, args: JSONObject): JSON
}
