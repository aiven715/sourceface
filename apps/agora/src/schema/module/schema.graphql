enum ModuleType {
  text
  table
}

type Module {
  id: Int!
  createdAt: DateTime!
  type: ModuleType
  position: ModulePosition!
  config: JSONObject!
}

# TODO: define type as scalar with js?
type ModulePosition {
  x: Int!
  y: Int!
  w: Int!
  h: Int!
}

input SpecificModulePositionInput {
  id: Int!
  x: Int!
  y: Int!
  w: Int!
  h: Int!
}

input ModulePositionInput {
  x: Int!
  y: Int!
  w: Int!
  h: Int!
}

extend type Mutation {
  addModule(
    type: ModuleType!
    config: JSONObject!
    position: ModulePositionInput!
  ): Module!
  updateModule(moduleId: Int!, key: String!, value: JSON!): Module!
  updateModulesPositions(positions: [SpecificModulePositionInput!]!): [Module!]!
}

extend type Query {
  modules: [Module!]!
}
